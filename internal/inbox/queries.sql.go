// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package inbox

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO inbox_message (posted_by, type, content_id)
VALUES ($1, $2, $3)
RETURNING id, posted_by, type, content_id, created_at, updated_at
`

type CreateMessageParams struct {
	PostedBy  uuid.UUID
	Type      ContentType
	ContentID uuid.UUID
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (InboxMessage, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.PostedBy, arg.Type, arg.ContentID)
	var i InboxMessage
	err := row.Scan(
		&i.ID,
		&i.PostedBy,
		&i.Type,
		&i.ContentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserInboxBulk = `-- name: CreateUserInboxBulk :many
INSERT INTO user_inbox_messages (user_id, message_id)
SELECT unnest($1::uuid[]), $2::uuid
RETURNING id, user_id, message_id, is_read, is_starred, is_archived
`

type CreateUserInboxBulkParams struct {
	UserIds   []uuid.UUID
	MessageID uuid.UUID
}

func (q *Queries) CreateUserInboxBulk(ctx context.Context, arg CreateUserInboxBulkParams) ([]UserInboxMessage, error) {
	rows, err := q.db.Query(ctx, createUserInboxBulk, arg.UserIds, arg.MessageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserInboxMessage
	for rows.Next() {
		var i UserInboxMessage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MessageID,
			&i.IsRead,
			&i.IsStarred,
			&i.IsArchived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT 
    uim.id, uim.user_id, uim.message_id, uim.is_read, uim.is_starred, uim.is_archived,
    im.id, im.posted_by, im.type, im.content_id, im.created_at, im.updated_at,
    CASE WHEN im.type = 'form' THEN COALESCE(f.preview_message, LEFT(f.description, 25)) END AS preview_message,
    CASE WHEN im.type = 'form' THEN f.title END AS title,
    CASE WHEN im.type = 'form' THEN COALESCE(o.name, u.name) END AS org_name,
    CASE WHEN im.type = 'form' AND u.type = 'unit' THEN u.name END AS unit_name
FROM user_inbox_messages uim
JOIN inbox_message im ON uim.message_id = im.id
LEFT JOIN forms f ON im.type = 'form' AND im.content_id = f.id
LEFT JOIN units u ON f.unit_id = u.id
LEFT JOIN units o ON u.org_id = o.id
WHERE uim.id = $1 AND uim.user_id = $2
`

type GetByIDParams struct {
	UserInboxMessageID uuid.UUID
	UserID             uuid.UUID
}

type GetByIDRow struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	MessageID      uuid.UUID
	IsRead         bool
	IsStarred      bool
	IsArchived     bool
	ID_2           uuid.UUID
	PostedBy       uuid.UUID
	Type           ContentType
	ContentID      uuid.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	PreviewMessage interface{}
	Title          interface{}
	OrgName        interface{}
	UnitName       interface{}
}

func (q *Queries) GetByID(ctx context.Context, arg GetByIDParams) (GetByIDRow, error) {
	row := q.db.QueryRow(ctx, getByID, arg.UserInboxMessageID, arg.UserID)
	var i GetByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MessageID,
		&i.IsRead,
		&i.IsStarred,
		&i.IsArchived,
		&i.ID_2,
		&i.PostedBy,
		&i.Type,
		&i.ContentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PreviewMessage,
		&i.Title,
		&i.OrgName,
		&i.UnitName,
	)
	return i, err
}

const list = `-- name: List :many
SELECT 
    uim.id, uim.user_id, uim.message_id, uim.is_read, uim.is_starred, uim.is_archived,
    im.id, im.posted_by, im.type, im.content_id, im.created_at, im.updated_at,
    CASE WHEN im.type = 'form' THEN COALESCE(f.preview_message, LEFT(f.description, 25)) END AS preview_message,
    CASE WHEN im.type = 'form' THEN f.title END AS title,
    CASE WHEN im.type = 'form' THEN COALESCE(o.name, u.name) END AS org_name,
    CASE WHEN im.type = 'form' AND u.type = 'unit' THEN u.name END AS unit_name
FROM user_inbox_messages uim
JOIN inbox_message im ON uim.message_id = im.id
LEFT JOIN forms f ON im.type = 'form' AND im.content_id = f.id
LEFT JOIN units u ON f.unit_id = u.id
LEFT JOIN units o ON u.org_id = o.id
WHERE uim.user_id = $1
  AND ($2::boolean IS NULL OR uim.is_read = $2)
  AND ($3::boolean IS NULL OR uim.is_starred = $3)
  AND (uim.is_archived = COALESCE($4::boolean, false))
  AND ($5::text = '' OR $5::text IS NULL OR (
    CASE WHEN im.type = 'form' THEN f.title ELSE '' END ILIKE '%' || $5::text || '%'
    OR CASE WHEN im.type = 'form' THEN f.description ELSE '' END ILIKE '%' || $5::text || '%'
    OR CASE WHEN im.type = 'form' THEN COALESCE(f.preview_message, LEFT(f.description, 25)) ELSE '' END ILIKE '%' || $5::text || '%'
  ))
LIMIT COALESCE($7::int, 10)
OFFSET COALESCE($6::int, 0)
`

type ListParams struct {
	UserID     uuid.UUID
	IsRead     pgtype.Bool
	IsStarred  pgtype.Bool
	IsArchived pgtype.Bool
	Search     string
	PageOffset int32
	PageLimit  int32
}

type ListRow struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	MessageID      uuid.UUID
	IsRead         bool
	IsStarred      bool
	IsArchived     bool
	ID_2           uuid.UUID
	PostedBy       uuid.UUID
	Type           ContentType
	ContentID      uuid.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	PreviewMessage interface{}
	Title          interface{}
	OrgName        interface{}
	UnitName       interface{}
}

func (q *Queries) List(ctx context.Context, arg ListParams) ([]ListRow, error) {
	rows, err := q.db.Query(ctx, list,
		arg.UserID,
		arg.IsRead,
		arg.IsStarred,
		arg.IsArchived,
		arg.Search,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRow
	for rows.Next() {
		var i ListRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MessageID,
			&i.IsRead,
			&i.IsStarred,
			&i.IsArchived,
			&i.ID_2,
			&i.PostedBy,
			&i.Type,
			&i.ContentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PreviewMessage,
			&i.Title,
			&i.OrgName,
			&i.UnitName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCount = `-- name: ListCount :one
SELECT 
    COUNT(*) AS total
FROM user_inbox_messages uim
JOIN inbox_message im ON uim.message_id = im.id
LEFT JOIN forms f ON im.type = 'form' AND im.content_id = f.id
LEFT JOIN units u ON f.unit_id = u.id
LEFT JOIN units o ON u.org_id = o.id
WHERE uim.user_id = $1
  AND ($2::boolean IS NULL OR uim.is_read = $2)
  AND ($3::boolean IS NULL OR uim.is_starred = $3)
  AND (uim.is_archived = COALESCE($4::boolean, false))
  AND ($5::text = '' OR $5::text IS NULL OR (
    CASE WHEN im.type = 'form' THEN f.title ELSE '' END ILIKE '%' || $5::text || '%'
    OR CASE WHEN im.type = 'form' THEN f.description ELSE '' END ILIKE '%' || $5::text || '%'
    OR CASE WHEN im.type = 'form' THEN COALESCE(f.preview_message, LEFT(f.description, 25)) ELSE '' END ILIKE '%' || $5::text || '%'
  ))
`

type ListCountParams struct {
	UserID     uuid.UUID
	IsRead     pgtype.Bool
	IsStarred  pgtype.Bool
	IsArchived pgtype.Bool
	Search     string
}

func (q *Queries) ListCount(ctx context.Context, arg ListCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, listCount,
		arg.UserID,
		arg.IsRead,
		arg.IsStarred,
		arg.IsArchived,
		arg.Search,
	)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const updateByID = `-- name: UpdateByID :one
UPDATE user_inbox_messages AS uim
SET is_read = $1, is_starred = $2, is_archived = $3
FROM inbox_message AS im
LEFT JOIN forms f ON im.type = 'form' AND im.content_id = f.id
LEFT JOIN units u ON f.unit_id = u.id
LEFT JOIN units o ON u.org_id = o.id
WHERE uim.message_id = im.id AND uim.id = $4 AND uim.user_id = $5
RETURNING uim.id, uim.user_id, uim.message_id, uim.is_read, uim.is_starred, uim.is_archived, im.id, im.posted_by, im.type, im.content_id, im.created_at, im.updated_at,
CASE WHEN im.type = 'form' THEN COALESCE(f.preview_message, LEFT(f.description, 25)) END AS preview_message,
CASE WHEN im.type = 'form' THEN f.title END AS title,
CASE WHEN im.type = 'form' THEN COALESCE(o.name, u.name) END AS org_name,
CASE WHEN im.type = 'form' AND u.type = 'unit' THEN u.name END AS unit_name
`

type UpdateByIDParams struct {
	IsRead     bool
	IsStarred  bool
	IsArchived bool
	ID         uuid.UUID
	UserID     uuid.UUID
}

type UpdateByIDRow struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	MessageID      uuid.UUID
	IsRead         bool
	IsStarred      bool
	IsArchived     bool
	ID_2           uuid.UUID
	PostedBy       uuid.UUID
	Type           ContentType
	ContentID      uuid.UUID
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	PreviewMessage interface{}
	Title          interface{}
	OrgName        interface{}
	UnitName       interface{}
}

func (q *Queries) UpdateByID(ctx context.Context, arg UpdateByIDParams) (UpdateByIDRow, error) {
	row := q.db.QueryRow(ctx, updateByID,
		arg.IsRead,
		arg.IsStarred,
		arg.IsArchived,
		arg.ID,
		arg.UserID,
	)
	var i UpdateByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MessageID,
		&i.IsRead,
		&i.IsStarred,
		&i.IsArchived,
		&i.ID_2,
		&i.PostedBy,
		&i.Type,
		&i.ContentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PreviewMessage,
		&i.Title,
		&i.OrgName,
		&i.UnitName,
	)
	return i, err
}
