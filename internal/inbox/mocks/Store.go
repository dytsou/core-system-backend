// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	inbox "NYCU-SDC/core-system-backend/internal/inbox"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, userID, filter
func (_m *Store) Count(ctx context.Context, userID uuid.UUID, filter *inbox.FilterRequest) (int64, error) {
	ret := _m.Called(ctx, userID, filter)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *inbox.FilterRequest) (int64, error)); ok {
		return rf(ctx, userID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *inbox.FilterRequest) int64); ok {
		r0 = rf(ctx, userID, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *inbox.FilterRequest) error); ok {
		r1 = rf(ctx, userID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id, userID
func (_m *Store) GetByID(ctx context.Context, id uuid.UUID, userID uuid.UUID) (inbox.GetByIDRow, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 inbox.GetByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (inbox.GetByIDRow, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) inbox.GetByIDRow); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(inbox.GetByIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, userID, filter, page, size
func (_m *Store) List(ctx context.Context, userID uuid.UUID, filter *inbox.FilterRequest, page int, size int) ([]inbox.ListRow, error) {
	ret := _m.Called(ctx, userID, filter, page, size)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []inbox.ListRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *inbox.FilterRequest, int, int) ([]inbox.ListRow, error)); ok {
		return rf(ctx, userID, filter, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *inbox.FilterRequest, int, int) []inbox.ListRow); ok {
		r0 = rf(ctx, userID, filter, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inbox.ListRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *inbox.FilterRequest, int, int) error); ok {
		r1 = rf(ctx, userID, filter, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, id, userID, arg
func (_m *Store) UpdateByID(ctx context.Context, id uuid.UUID, userID uuid.UUID, arg inbox.UserInboxMessageFilter) (inbox.UpdateByIDRow, error) {
	ret := _m.Called(ctx, id, userID, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 inbox.UpdateByIDRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, inbox.UserInboxMessageFilter) (inbox.UpdateByIDRow, error)); ok {
		return rf(ctx, id, userID, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, inbox.UserInboxMessageFilter) inbox.UpdateByIDRow); ok {
		r0 = rf(ctx, id, userID, arg)
	} else {
		r0 = ret.Get(0).(inbox.UpdateByIDRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, inbox.UserInboxMessageFilter) error); ok {
		r1 = rf(ctx, id, userID, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
