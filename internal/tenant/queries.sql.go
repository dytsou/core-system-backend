// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package tenant

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO tenants (id, db_strategy, owner_id)
VALUES ($1, $2, $3)
RETURNING id, db_strategy, owner_id
`

type CreateParams struct {
	ID         uuid.UUID
	DbStrategy DbStrategy
	OwnerID    pgtype.UUID
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, create, arg.ID, arg.DbStrategy, arg.OwnerID)
	var i Tenant
	err := row.Scan(&i.ID, &i.DbStrategy, &i.OwnerID)
	return i, err
}

const createSlugHistory = `-- name: CreateSlugHistory :one
INSERT INTO slug_history (slug, org_id)
VALUES ($1, $2)
RETURNING id, slug, org_id, created_at, ended_at
`

type CreateSlugHistoryParams struct {
	Slug  string
	OrgID pgtype.UUID
}

func (q *Queries) CreateSlugHistory(ctx context.Context, arg CreateSlugHistoryParams) (SlugHistory, error) {
	row := q.db.QueryRow(ctx, createSlugHistory, arg.Slug, arg.OrgID)
	var i SlugHistory
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.OrgID,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM tenants
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const existsBySlug = `-- name: ExistsBySlug :one
SELECT EXISTS(SELECT 1 FROM slug_history WHERE slug = $1 AND ended_at IS NULL)
`

func (q *Queries) ExistsBySlug(ctx context.Context, slug string) (bool, error) {
	row := q.db.QueryRow(ctx, existsBySlug, slug)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const get = `-- name: Get :one
SELECT id, db_strategy, owner_id FROM tenants WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Tenant
	err := row.Scan(&i.ID, &i.DbStrategy, &i.OwnerID)
	return i, err
}

const getSlugHistory = `-- name: GetSlugHistory :many
SELECT s.id, s.slug, s.org_id, s.created_at, s.ended_at, u.name
FROM slug_history s
LEFT JOIN units u ON s.org_id = u.id
WHERE slug = $1
ORDER BY s.created_at DESC, s.id DESC
`

type GetSlugHistoryRow struct {
	ID        int32
	Slug      string
	OrgID     pgtype.UUID
	CreatedAt pgtype.Timestamptz
	EndedAt   pgtype.Timestamptz
	Name      pgtype.Text
}

func (q *Queries) GetSlugHistory(ctx context.Context, slug string) ([]GetSlugHistoryRow, error) {
	rows, err := q.db.Query(ctx, getSlugHistory, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSlugHistoryRow
	for rows.Next() {
		var i GetSlugHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.OrgID,
			&i.CreatedAt,
			&i.EndedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSlugStatus = `-- name: GetSlugStatus :one
SELECT org_id
FROM slug_history
WHERE slug = $1
  AND ended_at IS NULL
`

func (q *Queries) GetSlugStatus(ctx context.Context, slug string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getSlugStatus, slug)
	var org_id pgtype.UUID
	err := row.Scan(&org_id)
	return org_id, err
}

const update = `-- name: Update :one
UPDATE tenants
SET db_strategy = $2
WHERE id = $1
RETURNING id, db_strategy, owner_id
`

type UpdateParams struct {
	ID         uuid.UUID
	DbStrategy DbStrategy
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.DbStrategy)
	var i Tenant
	err := row.Scan(&i.ID, &i.DbStrategy, &i.OwnerID)
	return i, err
}

const updateSlugHistory = `-- name: UpdateSlugHistory :many
WITH
    -- Select the currently active slug for the org
    current_slug AS (
        SELECT slug
        FROM slug_history sh
        WHERE sh.org_id = $1 AND ended_at IS NULL
        FOR UPDATE
    ),

    -- End the old slug record if a new slug is assigned
    ended_history AS (
      UPDATE slug_history sh
      SET ended_at = now()
      WHERE org_id = $1
        AND ended_at IS NULL
        AND (SELECT sh.slug FROM current_slug) <> $2
      RETURNING org_id
    ),

    -- Insert the new slug record if an update occurred
    new_history AS (
      INSERT INTO slug_history (slug, org_id)
      SELECT
        $2, $1
      FROM ended_history
      RETURNING org_id
    )
SELECT org_id FROM new_history
`

type UpdateSlugHistoryParams struct {
	OrgID pgtype.UUID
	Slug  string
}

func (q *Queries) UpdateSlugHistory(ctx context.Context, arg UpdateSlugHistoryParams) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, updateSlugHistory, arg.OrgID, arg.Slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var org_id pgtype.UUID
		if err := rows.Scan(&org_id); err != nil {
			return nil, err
		}
		items = append(items, org_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
