// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package response

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const answerExists = `-- name: AnswerExists :one
SELECT EXISTS(SELECT 1 FROM answers WHERE response_id = $1 AND question_id = $2)
`

type AnswerExistsParams struct {
	ResponseID uuid.UUID
	QuestionID uuid.UUID
}

func (q *Queries) AnswerExists(ctx context.Context, arg AnswerExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, answerExists, arg.ResponseID, arg.QuestionID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkAnswerContent = `-- name: CheckAnswerContent :one
SELECT EXISTS(SELECT 1 FROM answers WHERE response_id = $1 AND question_id = $2 AND value = $3)
`

type CheckAnswerContentParams struct {
	ResponseID uuid.UUID
	QuestionID uuid.UUID
	Value      string
}

func (q *Queries) CheckAnswerContent(ctx context.Context, arg CheckAnswerContentParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkAnswerContent, arg.ResponseID, arg.QuestionID, arg.Value)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const create = `-- name: Create :one
INSERT INTO form_responses (form_id, submitted_by)
VALUES ($1, $2)
RETURNING id, form_id, submitted_by, created_at, updated_at
`

type CreateParams struct {
	FormID      uuid.UUID
	SubmittedBy uuid.UUID
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (FormResponse, error) {
	row := q.db.QueryRow(ctx, create, arg.FormID, arg.SubmittedBy)
	var i FormResponse
	err := row.Scan(
		&i.ID,
		&i.FormID,
		&i.SubmittedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answers (response_id, question_id, type, value)
VALUES ($1, $2, $3, $4)
RETURNING id, response_id, question_id, type, value, created_at, updated_at
`

type CreateAnswerParams struct {
	ResponseID uuid.UUID
	QuestionID uuid.UUID
	Type       QuestionType
	Value      string
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (Answer, error) {
	row := q.db.QueryRow(ctx, createAnswer,
		arg.ResponseID,
		arg.QuestionID,
		arg.Type,
		arg.Value,
	)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.ResponseID,
		&i.QuestionID,
		&i.Type,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM form_responses
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const deleteAnswersByResponseID = `-- name: DeleteAnswersByResponseID :exec
DELETE FROM answers 
WHERE response_id = $1
`

func (q *Queries) DeleteAnswersByResponseID(ctx context.Context, responseID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAnswersByResponseID, responseID)
	return err
}

const exists = `-- name: Exists :one
SELECT EXISTS(SELECT 1 FROM form_responses WHERE form_id = $1 AND submitted_by = $2)
`

type ExistsParams struct {
	FormID      uuid.UUID
	SubmittedBy uuid.UUID
}

func (q *Queries) Exists(ctx context.Context, arg ExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, exists, arg.FormID, arg.SubmittedBy)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const get = `-- name: Get :one
SELECT id, form_id, submitted_by, created_at, updated_at FROM form_responses
WHERE id = $1 AND form_id = $2
`

type GetParams struct {
	ID     uuid.UUID
	FormID uuid.UUID
}

func (q *Queries) Get(ctx context.Context, arg GetParams) (FormResponse, error) {
	row := q.db.QueryRow(ctx, get, arg.ID, arg.FormID)
	var i FormResponse
	err := row.Scan(
		&i.ID,
		&i.FormID,
		&i.SubmittedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnswerID = `-- name: GetAnswerID :one
SELECT id FROM answers WHERE response_id = $1 AND question_id = $2
`

type GetAnswerIDParams struct {
	ResponseID uuid.UUID
	QuestionID uuid.UUID
}

func (q *Queries) GetAnswerID(ctx context.Context, arg GetAnswerIDParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getAnswerID, arg.ResponseID, arg.QuestionID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAnswersByQuestionID = `-- name: GetAnswersByQuestionID :many
SELECT a.id, a.response_id, a.question_id, a.type, a.value, a.created_at, a.updated_at, r.form_id, r.submitted_by FROM answers a
JOIN form_responses r ON a.response_id = r.id
WHERE a.question_id = $1 AND r.form_id = $2
ORDER BY a.created_at ASC
`

type GetAnswersByQuestionIDParams struct {
	QuestionID uuid.UUID
	FormID     uuid.UUID
}

type GetAnswersByQuestionIDRow struct {
	ID          uuid.UUID
	ResponseID  uuid.UUID
	QuestionID  uuid.UUID
	Type        QuestionType
	Value       string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	FormID      uuid.UUID
	SubmittedBy uuid.UUID
}

func (q *Queries) GetAnswersByQuestionID(ctx context.Context, arg GetAnswersByQuestionIDParams) ([]GetAnswersByQuestionIDRow, error) {
	rows, err := q.db.Query(ctx, getAnswersByQuestionID, arg.QuestionID, arg.FormID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnswersByQuestionIDRow
	for rows.Next() {
		var i GetAnswersByQuestionIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ResponseID,
			&i.QuestionID,
			&i.Type,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FormID,
			&i.SubmittedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnswersByResponseID = `-- name: GetAnswersByResponseID :many
SELECT id, response_id, question_id, type, value, created_at, updated_at FROM answers 
WHERE response_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetAnswersByResponseID(ctx context.Context, responseID uuid.UUID) ([]Answer, error) {
	rows, err := q.db.Query(ctx, getAnswersByResponseID, responseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.ResponseID,
			&i.QuestionID,
			&i.Type,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByFormIDAndSubmittedBy = `-- name: GetByFormIDAndSubmittedBy :one
SELECT id, form_id, submitted_by, created_at, updated_at FROM form_responses
WHERE form_id = $1 AND submitted_by = $2
`

type GetByFormIDAndSubmittedByParams struct {
	FormID      uuid.UUID
	SubmittedBy uuid.UUID
}

func (q *Queries) GetByFormIDAndSubmittedBy(ctx context.Context, arg GetByFormIDAndSubmittedByParams) (FormResponse, error) {
	row := q.db.QueryRow(ctx, getByFormIDAndSubmittedBy, arg.FormID, arg.SubmittedBy)
	var i FormResponse
	err := row.Scan(
		&i.ID,
		&i.FormID,
		&i.SubmittedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listByFormID = `-- name: ListByFormID :many
SELECT id, form_id, submitted_by, created_at, updated_at FROM form_responses
WHERE form_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListByFormID(ctx context.Context, formID uuid.UUID) ([]FormResponse, error) {
	rows, err := q.db.Query(ctx, listByFormID, formID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FormResponse
	for rows.Next() {
		var i FormResponse
		if err := rows.Scan(
			&i.ID,
			&i.FormID,
			&i.SubmittedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE form_responses
SET updated_at = now()
WHERE id = $1
`

func (q *Queries) Update(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, update, id)
	return err
}

const updateAnswer = `-- name: UpdateAnswer :one
UPDATE answers 
SET value = $2, updated_at = now()
WHERE id = $1
RETURNING id, response_id, question_id, type, value, created_at, updated_at
`

type UpdateAnswerParams struct {
	ID    uuid.UUID
	Value string
}

func (q *Queries) UpdateAnswer(ctx context.Context, arg UpdateAnswerParams) (Answer, error) {
	row := q.db.QueryRow(ctx, updateAnswer, arg.ID, arg.Value)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.ResponseID,
		&i.QuestionID,
		&i.Type,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
