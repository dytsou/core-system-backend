// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package question

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO questions (form_id, required, type, title, description, metadata, "order")
VALUES ($1, $2, $3, $4, $5, $6, $7)
    RETURNING id, form_id, required, type, title, description, metadata, "order", created_at, updated_at
`

type CreateParams struct {
	FormID      uuid.UUID
	Required    bool
	Type        QuestionType
	Title       pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	Order       int32
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Question, error) {
	row := q.db.QueryRow(ctx, create,
		arg.FormID,
		arg.Required,
		arg.Type,
		arg.Title,
		arg.Description,
		arg.Metadata,
		arg.Order,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.FormID,
		&i.Required,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.Metadata,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM questions WHERE form_id = $1 AND id = $2
`

type DeleteParams struct {
	FormID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) Delete(ctx context.Context, arg DeleteParams) error {
	_, err := q.db.Exec(ctx, delete, arg.FormID, arg.ID)
	return err
}

const getByID = `-- name: GetByID :one
SELECT id, form_id, required, type, title, description, metadata, "order", created_at, updated_at FROM questions WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (Question, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.FormID,
		&i.Required,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.Metadata,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listByFormID = `-- name: ListByFormID :many
SELECT id, form_id, required, type, title, description, metadata, "order", created_at, updated_at FROM questions WHERE form_id = $1 ORDER BY "order"
`

func (q *Queries) ListByFormID(ctx context.Context, formID uuid.UUID) ([]Question, error) {
	rows, err := q.db.Query(ctx, listByFormID, formID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.FormID,
			&i.Required,
			&i.Type,
			&i.Title,
			&i.Description,
			&i.Metadata,
			&i.Order,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE questions
SET required = $3, type = $4, title = $5, description = $6, metadata = $7, "order" = $8, updated_at = now()
WHERE form_id = $1 AND id = $2
    RETURNING id, form_id, required, type, title, description, metadata, "order", created_at, updated_at
`

type UpdateParams struct {
	FormID      uuid.UUID
	ID          uuid.UUID
	Required    bool
	Type        QuestionType
	Title       pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	Order       int32
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Question, error) {
	row := q.db.QueryRow(ctx, update,
		arg.FormID,
		arg.ID,
		arg.Required,
		arg.Type,
		arg.Title,
		arg.Description,
		arg.Metadata,
		arg.Order,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.FormID,
		&i.Required,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.Metadata,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
