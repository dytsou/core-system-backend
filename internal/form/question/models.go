// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package question

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ContentType string

const (
	ContentTypeText ContentType = "text"
	ContentTypeForm ContentType = "form"
)

func (e *ContentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContentType(s)
	case string:
		*e = ContentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ContentType: %T", src)
	}
	return nil
}

type NullContentType struct {
	ContentType ContentType
	Valid       bool // Valid is true if ContentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContentType) Scan(value interface{}) error {
	if value == nil {
		ns.ContentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContentType), nil
}

type DbStrategy string

const (
	DbStrategyShared   DbStrategy = "shared"
	DbStrategyIsolated DbStrategy = "isolated"
)

func (e *DbStrategy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DbStrategy(s)
	case string:
		*e = DbStrategy(s)
	default:
		return fmt.Errorf("unsupported scan type for DbStrategy: %T", src)
	}
	return nil
}

type NullDbStrategy struct {
	DbStrategy DbStrategy
	Valid      bool // Valid is true if DbStrategy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDbStrategy) Scan(value interface{}) error {
	if value == nil {
		ns.DbStrategy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DbStrategy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDbStrategy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DbStrategy), nil
}

type QuestionType string

const (
	QuestionTypeShortText      QuestionType = "short_text"
	QuestionTypeLongText       QuestionType = "long_text"
	QuestionTypeSingleChoice   QuestionType = "single_choice"
	QuestionTypeMultipleChoice QuestionType = "multiple_choice"
	QuestionTypeDate           QuestionType = "date"
)

func (e *QuestionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = QuestionType(s)
	case string:
		*e = QuestionType(s)
	default:
		return fmt.Errorf("unsupported scan type for QuestionType: %T", src)
	}
	return nil
}

type NullQuestionType struct {
	QuestionType QuestionType
	Valid        bool // Valid is true if QuestionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullQuestionType) Scan(value interface{}) error {
	if value == nil {
		ns.QuestionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.QuestionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullQuestionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.QuestionType), nil
}

type Status string

const (
	StatusDraft     Status = "draft"
	StatusPublished Status = "published"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status
	Valid  bool // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type UnitType string

const (
	UnitTypeOrganization UnitType = "organization"
	UnitTypeUnit         UnitType = "unit"
)

func (e *UnitType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UnitType(s)
	case string:
		*e = UnitType(s)
	default:
		return fmt.Errorf("unsupported scan type for UnitType: %T", src)
	}
	return nil
}

type NullUnitType struct {
	UnitType UnitType
	Valid    bool // Valid is true if UnitType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUnitType) Scan(value interface{}) error {
	if value == nil {
		ns.UnitType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UnitType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUnitType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UnitType), nil
}

type Answer struct {
	ID         uuid.UUID
	ResponseID uuid.UUID
	QuestionID uuid.UUID
	Type       QuestionType
	Value      string
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

type Auth struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	Provider   string
	ProviderID string
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

type Form struct {
	ID             uuid.UUID
	Title          string
	Description    pgtype.Text
	PreviewMessage pgtype.Text
	Status         Status
	UnitID         pgtype.UUID
	LastEditor     uuid.UUID
	Deadline       pgtype.Timestamptz
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type FormResponse struct {
	ID          uuid.UUID
	FormID      uuid.UUID
	SubmittedBy uuid.UUID
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type InboxMessage struct {
	ID        uuid.UUID
	PostedBy  uuid.UUID
	Type      ContentType
	ContentID uuid.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type Question struct {
	ID          uuid.UUID
	FormID      uuid.UUID
	Required    bool
	Type        QuestionType
	Title       pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	Order       int32
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type RefreshToken struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	IsActive       pgtype.Bool
	ExpirationDate pgtype.Timestamptz
}

type Tenant struct {
	ID         uuid.UUID
	Slug       string
	DbStrategy DbStrategy
	OwnerID    pgtype.UUID
}

type Unit struct {
	ID          uuid.UUID
	OrgID       pgtype.UUID
	ParentID    pgtype.UUID
	Type        UnitType
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type UnitMember struct {
	UnitID   uuid.UUID
	MemberID uuid.UUID
}

type User struct {
	ID        uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Role      []string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type UserEmail struct {
	UserID    uuid.UUID
	Value     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type UserInboxMessage struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	MessageID  uuid.UUID
	IsRead     bool
	IsStarred  bool
	IsArchived bool
}

type UsersWithEmail struct {
	ID        uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Role      []string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Emails    interface{}
}
