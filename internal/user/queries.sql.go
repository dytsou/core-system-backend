// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package user

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO users (name, username, avatar_url, role)
VALUES ($1, $2, $3, $4) 
RETURNING id, name, username, avatar_url, role, created_at, updated_at
`

type CreateParams struct {
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Role      []string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Name,
		arg.Username,
		arg.AvatarUrl,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAuth = `-- name: CreateAuth :one
INSERT INTO auth (user_id, provider, provider_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, provider, provider_id, created_at, updated_at
`

type CreateAuthParams struct {
	UserID     uuid.UUID
	Provider   string
	ProviderID string
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (Auth, error) {
	row := q.db.QueryRow(ctx, createAuth, arg.UserID, arg.Provider, arg.ProviderID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.ProviderID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createEmail = `-- name: CreateEmail :one
INSERT INTO user_emails (user_id, value)
VALUES ($1, $2)
RETURNING user_id, value, created_at, updated_at
`

type CreateEmailParams struct {
	UserID uuid.UUID
	Value  string
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (UserEmail, error) {
	row := q.db.QueryRow(ctx, createEmail, arg.UserID, arg.Value)
	var i UserEmail
	err := row.Scan(
		&i.UserID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const existsByAuth = `-- name: ExistsByAuth :one
SELECT EXISTS(SELECT 1 FROM auth WHERE provider = $1 AND provider_id = $2)
`

type ExistsByAuthParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) ExistsByAuth(ctx context.Context, arg ExistsByAuthParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsByAuth, arg.Provider, arg.ProviderID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const existsByID = `-- name: ExistsByID :one
SELECT EXISTS(SELECT 1 FROM users WHERE id = $1)
`

func (q *Queries) ExistsByID(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, existsByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const existsEmail = `-- name: ExistsEmail :one
SELECT EXISTS(SELECT 1 FROM user_emails WHERE user_id = $1 AND value = $2)
`

type ExistsEmailParams struct {
	UserID uuid.UUID
	Value  string
}

func (q *Queries) ExistsEmail(ctx context.Context, arg ExistsEmailParams) (bool, error) {
	row := q.db.QueryRow(ctx, existsEmail, arg.UserID, arg.Value)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getByID = `-- name: GetByID :one
SELECT id, name, username, avatar_url, role, created_at, updated_at, emails
FROM users_with_emails
WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (UsersWithEmail, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i UsersWithEmail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Emails,
	)
	return i, err
}

const getEmailsByID = `-- name: GetEmailsByID :many
SELECT user_emails.value as email FROM user_emails WHERE user_id = $1
`

func (q *Queries) GetEmailsByID(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getEmailsByID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var email string
		if err := rows.Scan(&email); err != nil {
			return nil, err
		}
		items = append(items, email)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIDByAuth = `-- name: GetIDByAuth :one
SELECT user_id FROM auth WHERE provider = $1 AND provider_id = $2
`

type GetIDByAuthParams struct {
	Provider   string
	ProviderID string
}

func (q *Queries) GetIDByAuth(ctx context.Context, arg GetIDByAuthParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getIDByAuth, arg.Provider, arg.ProviderID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const update = `-- name: Update :one
UPDATE users
SET name = $2, username = $3, avatar_url = $4, 
    updated_at = now()
WHERE id = $1
RETURNING id, name, username, avatar_url, role, created_at, updated_at
`

type UpdateParams struct {
	ID        uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (User, error) {
	row := q.db.QueryRow(ctx, update,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.AvatarUrl,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
