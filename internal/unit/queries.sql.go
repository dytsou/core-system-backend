// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package unit

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addMember = `-- name: AddMember :one
WITH inserted_member AS (
    INSERT INTO unit_members (unit_id, member_id)
    SELECT $1, user_emails.user_id
    FROM user_emails
        WHERE user_emails.value = $2
    ON CONFLICT (unit_id, member_id) DO UPDATE
        SET member_id = EXCLUDED.member_id
    RETURNING unit_id, member_id
)
SELECT um.unit_id, um.member_id, u.name, u.username, u.avatar_url
FROM inserted_member um
LEFT JOIN users u ON u.id = um.member_id
`

type AddMemberParams struct {
	UnitID      uuid.UUID
	MemberEmail string
}

type AddMemberRow struct {
	UnitID    uuid.UUID
	MemberID  uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) (AddMemberRow, error) {
	row := q.db.QueryRow(ctx, addMember, arg.UnitID, arg.MemberEmail)
	var i AddMemberRow
	err := row.Scan(
		&i.UnitID,
		&i.MemberID,
		&i.Name,
		&i.Username,
		&i.AvatarUrl,
	)
	return i, err
}

const create = `-- name: Create :one
INSERT INTO units (name, org_id, description, metadata, type, parent_id)
VALUES ($1, $2, $3, $4, $5, $6)
    RETURNING id, org_id, parent_id, type, name, description, metadata, created_at, updated_at
`

type CreateParams struct {
	Name        pgtype.Text
	OrgID       pgtype.UUID
	Description pgtype.Text
	Metadata    []byte
	Type        UnitType
	ParentID    pgtype.UUID
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Unit, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Name,
		arg.OrgID,
		arg.Description,
		arg.Metadata,
		arg.Type,
		arg.ParentID,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM units WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAllOrganizations = `-- name: GetAllOrganizations :many
SELECT u.id, u.org_id, u.parent_id, u.type, u.name, u.description, u.metadata, u.created_at, u.updated_at, t.slug
FROM units u
LEFT JOIN tenants t ON t.id = u.id
WHERE u.type = 'organization'
`

type GetAllOrganizationsRow struct {
	ID          uuid.UUID
	OrgID       pgtype.UUID
	ParentID    pgtype.UUID
	Type        UnitType
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Slug        pgtype.Text
}

func (q *Queries) GetAllOrganizations(ctx context.Context) ([]GetAllOrganizationsRow, error) {
	rows, err := q.db.Query(ctx, getAllOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllOrganizationsRow
	for rows.Next() {
		var i GetAllOrganizationsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.ParentID,
			&i.Type,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, org_id, parent_id, type, name, description, metadata, created_at, updated_at FROM units WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (Unit, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganizationByIDWithSlug = `-- name: GetOrganizationByIDWithSlug :one
SELECT u.id, u.org_id, u.parent_id, u.type, u.name, u.description, u.metadata, u.created_at, u.updated_at, t.slug
FROM units u
LEFT JOIN tenants t ON t.id = u.id
WHERE u.id = $1 AND u.type = 'organization'
`

type GetOrganizationByIDWithSlugRow struct {
	ID          uuid.UUID
	OrgID       pgtype.UUID
	ParentID    pgtype.UUID
	Type        UnitType
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Slug        pgtype.Text
}

func (q *Queries) GetOrganizationByIDWithSlug(ctx context.Context, id uuid.UUID) (GetOrganizationByIDWithSlugRow, error) {
	row := q.db.QueryRow(ctx, getOrganizationByIDWithSlug, id)
	var i GetOrganizationByIDWithSlugRow
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Slug,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT m.member_id,
       u.name,
       u.username,
       u.avatar_url,
       u.emails
FROM unit_members m
JOIN users_with_emails u ON u.id = m.member_id
WHERE m.unit_id = $1
`

type ListMembersRow struct {
	MemberID  uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
	Emails    interface{}
}

func (q *Queries) ListMembers(ctx context.Context, unitID uuid.UUID) ([]ListMembersRow, error) {
	rows, err := q.db.Query(ctx, listMembers, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMembersRow
	for rows.Next() {
		var i ListMembersRow
		if err := rows.Scan(
			&i.MemberID,
			&i.Name,
			&i.Username,
			&i.AvatarUrl,
			&i.Emails,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubUnitIDs = `-- name: ListSubUnitIDs :many
SELECT id FROM units WHERE parent_id = $1
`

func (q *Queries) ListSubUnitIDs(ctx context.Context, parentID pgtype.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listSubUnitIDs, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubUnits = `-- name: ListSubUnits :many
SELECT id, org_id, parent_id, type, name, description, metadata, created_at, updated_at FROM units WHERE parent_id = $1
`

func (q *Queries) ListSubUnits(ctx context.Context, parentID pgtype.UUID) ([]Unit, error) {
	rows, err := q.db.Query(ctx, listSubUnits, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.OrgID,
			&i.ParentID,
			&i.Type,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnitsMembers = `-- name: ListUnitsMembers :many
SELECT m.unit_id,
       m.member_id,
       u.name,
       u.username,
       u.avatar_url
FROM unit_members m
JOIN users u ON u.id = m.member_id
WHERE m.unit_id = ANY($1::uuid[])
`

type ListUnitsMembersRow struct {
	UnitID    uuid.UUID
	MemberID  uuid.UUID
	Name      pgtype.Text
	Username  pgtype.Text
	AvatarUrl pgtype.Text
}

func (q *Queries) ListUnitsMembers(ctx context.Context, dollar_1 []uuid.UUID) ([]ListUnitsMembersRow, error) {
	rows, err := q.db.Query(ctx, listUnitsMembers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUnitsMembersRow
	for rows.Next() {
		var i ListUnitsMembersRow
		if err := rows.Scan(
			&i.UnitID,
			&i.MemberID,
			&i.Name,
			&i.Username,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMember = `-- name: RemoveMember :exec
DELETE FROM unit_members WHERE unit_id = $1 AND member_id = $2
`

type RemoveMemberParams struct {
	UnitID   uuid.UUID
	MemberID uuid.UUID
}

func (q *Queries) RemoveMember(ctx context.Context, arg RemoveMemberParams) error {
	_, err := q.db.Exec(ctx, removeMember, arg.UnitID, arg.MemberID)
	return err
}

const update = `-- name: Update :one
UPDATE units
SET name = $2,
    description = $3,
    metadata = $4,
    updated_at = now()
WHERE id = $1
RETURNING id, org_id, parent_id, type, name, description, metadata, created_at, updated_at
`

type UpdateParams struct {
	ID          uuid.UUID
	Name        pgtype.Text
	Description pgtype.Text
	Metadata    []byte
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Unit, error) {
	row := q.db.QueryRow(ctx, update,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Metadata,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateParent = `-- name: UpdateParent :one
UPDATE units
SET parent_id = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, org_id, parent_id, type, name, description, metadata, created_at, updated_at
`

type UpdateParentParams struct {
	ID       uuid.UUID
	ParentID pgtype.UUID
}

func (q *Queries) UpdateParent(ctx context.Context, arg UpdateParentParams) (Unit, error) {
	row := q.db.QueryRow(ctx, updateParent, arg.ID, arg.ParentID)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.ParentID,
		&i.Type,
		&i.Name,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
